service: yes

plugins:
  - serverless-esbuild
  - serverless-offline

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    restApiId: !Ref ApiGateway
    restApiRootResourceId: !GetAtt ApiGateway.RootResourceId
  iamRoleStatements:
    - Effect: Allow # / Deny
      Action:
        - s3:*
        - dynamodb:*
        - cognito-idp:*
        - cognito-identity:*
        - cloudsearch:*
        - ssm:GetParameter
        - cognito-idp:AdminCreateUser
      Resource:
        - '*'
  environment:
    DYNAMODB_USER_TABLE: ${self:service}-usertable-${sls:stage}
    DYNAMODB_CAR_TABLE: ${self:service}-carsTable-${sls:stage}

custom:
  userPoolName: test-user-pool-${sls:stage}
  userPoolClientName: test-user-pool-client-${sls:stage}

resources:
  Resources:
    CarsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-carsTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: carId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: carId
            KeyType: RANGE
        ProvisionedThroughput:
          WriteCapacityUnits: 1
          ReadCapacityUnits: 1

    ApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: 'test-api'
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
        Schema: # Custom user attributes defined here
           - AttributeDataType: String
             Mutable: true
             Name: "password"
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGateway
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt CognitoUserPool.Arn

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-usertable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: email
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: Email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

#    ServerlessApiGateWayAuthorizer:
#      Type: AWS::ApiGateway::Authorizer
#      Properties:
#        Name: ${self:service}-rest-api-authorizer-${self:provider.stage}
#        IdentitySource: method.request.header.Authorization
#        RestApiId: !Ref ServerlessWebRestApi
#        Type: COGNITO_USER_POOLS
#        ProviderARNs:
#          - Fn::GetAtt:
#              - CognitoUsersPool
#              - Arn

functions:
  getUser:
    handler: getUser.getUser
    events:
      - http:
          path: /users/{name}
          method: get
          request:
            parameters:
              paths:
                name: true
          cors:
            origin: '*'
            headers:
              - '*'
  getUsers:
    handler: getUsers.getUsers
    events:
      - http:
          path: /users
          method: get
          cors:
            origin: '*'
            headers:
              - '*'
  createUsers:
    handler: createUser.createUsers
    environment:
      COGNITO_USER_POOL_ID: Ref !CognitoUserPool
    events:
      - http:
          path: /users
          method: post
          cors:
            origin: '*'
            headers:
              - '*'
  #      - cognitoUserPool:
#          pool: ${self:provider.stage}MyUserPool
  getFromGSI:
    handler: getFromGSI.getFromGSI
    events:
      - http:
          path: /
          method: get
          request:
            parameters:
              paths:
                name: true
          cors:
            origin: '*'
            headers:
              - '*'
  login:
    handler: login.xxx
    events:
      - http:
          path: /users/login
          method: post
          cors:
            origin: '*'
            headers:
              - '*'
  getCars:
    handler: getCars.cars
    events:
      - http:
          path: /user/{userId}/cars
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - '*'

  createCar:
    handler: createCar.cars
    events:
      - http:
          path: user/car
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          cors:
            origins: '*'
            headers:
              - '*'
